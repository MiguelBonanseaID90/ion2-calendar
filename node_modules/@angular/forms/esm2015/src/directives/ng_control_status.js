/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { Directive, Optional, Self } from '@angular/core';
import { ControlContainer } from './control_container';
import { NgControl } from './ng_control';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './ng_control';
import * as ɵngcc2 from './control_container';
export class AbstractControlStatus {
    constructor(cd) {
        this._cd = cd;
    }
    is(status) {
        var _a, _b, _c;
        // Currently with ViewEngine (in AOT mode) it's not possible to use private methods in host
        // bindings.
        // TODO: once ViewEngine is removed, this function should be refactored:
        //  - make the `is` method `protected`, so it's not accessible publicly
        //  - move the `submitted` status logic to the `NgControlStatusGroup` class
        //    and make it `private` or `protected` too.
        if (status === 'submitted') {
            // We check for the `submitted` field from `NgForm` and `FormGroupDirective` classes, but
            // we avoid instanceof checks to prevent non-tree-shakable references to those types.
            return !!((_a = this._cd) === null || _a === void 0 ? void 0 : _a.submitted);
        }
        return !!((_c = (_b = this._cd) === null || _b === void 0 ? void 0 : _b.control) === null || _c === void 0 ? void 0 : _c[status]);
    }
}
export const ngControlStatusHost = {
    '[class.ng-untouched]': 'is("untouched")',
    '[class.ng-touched]': 'is("touched")',
    '[class.ng-pristine]': 'is("pristine")',
    '[class.ng-dirty]': 'is("dirty")',
    '[class.ng-valid]': 'is("valid")',
    '[class.ng-invalid]': 'is("invalid")',
    '[class.ng-pending]': 'is("pending")',
};
export const ngGroupStatusHost = {
    '[class.ng-untouched]': 'is("untouched")',
    '[class.ng-touched]': 'is("touched")',
    '[class.ng-pristine]': 'is("pristine")',
    '[class.ng-dirty]': 'is("dirty")',
    '[class.ng-valid]': 'is("valid")',
    '[class.ng-invalid]': 'is("invalid")',
    '[class.ng-pending]': 'is("pending")',
    '[class.ng-submitted]': 'is("submitted")',
};
/**
 * @description
 * Directive automatically applied to Angular form controls that sets CSS classes
 * based on control status.
 *
 * @usageNotes
 *
 * ### CSS classes applied
 *
 * The following classes are applied as the properties become true:
 *
 * * ng-valid
 * * ng-invalid
 * * ng-pending
 * * ng-pristine
 * * ng-dirty
 * * ng-untouched
 * * ng-touched
 *
 * @ngModule ReactiveFormsModule
 * @ngModule FormsModule
 * @publicApi
 */
export class NgControlStatus extends AbstractControlStatus {
    constructor(cd) {
        super(cd);
    }
}
NgControlStatus.ɵfac = function NgControlStatus_Factory(t) { return new (t || NgControlStatus)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 2)); };
NgControlStatus.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: NgControlStatus, selectors: [["", "formControlName", ""], ["", "ngModel", ""], ["", "formControl", ""]], hostVars: 14, hostBindings: function NgControlStatus_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("ng-untouched", ctx.is("untouched"))("ng-touched", ctx.is("touched"))("ng-pristine", ctx.is("pristine"))("ng-dirty", ctx.is("dirty"))("ng-valid", ctx.is("valid"))("ng-invalid", ctx.is("invalid"))("ng-pending", ctx.is("pending"));
    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
NgControlStatus.ctorParameters = () => [
    { type: NgControl, decorators: [{ type: Self }] }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgControlStatus, [{
        type: Directive,
        args: [{ selector: '[formControlName],[ngModel],[formControl]', host: ngControlStatusHost }]
    }], function () { return [{ type: ɵngcc1.NgControl, decorators: [{
                type: Self
            }] }]; }, null); })();
/**
 * @description
 * Directive automatically applied to Angular form groups that sets CSS classes
 * based on control status (valid/invalid/dirty/etc). On groups, this includes the additional
 * class ng-submitted.
 *
 * @see `NgControlStatus`
 *
 * @ngModule ReactiveFormsModule
 * @ngModule FormsModule
 * @publicApi
 */
export class NgControlStatusGroup extends AbstractControlStatus {
    constructor(cd) {
        super(cd);
    }
}
NgControlStatusGroup.ɵfac = function NgControlStatusGroup_Factory(t) { return new (t || NgControlStatusGroup)(ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ControlContainer, 10)); };
NgControlStatusGroup.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: NgControlStatusGroup, selectors: [["", "formGroupName", ""], ["", "formArrayName", ""], ["", "ngModelGroup", ""], ["", "formGroup", ""], ["form", 3, "ngNoForm", ""], ["", "ngForm", ""]], hostVars: 16, hostBindings: function NgControlStatusGroup_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("ng-untouched", ctx.is("untouched"))("ng-touched", ctx.is("touched"))("ng-pristine", ctx.is("pristine"))("ng-dirty", ctx.is("dirty"))("ng-valid", ctx.is("valid"))("ng-invalid", ctx.is("invalid"))("ng-pending", ctx.is("pending"))("ng-submitted", ctx.is("submitted"));
    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
NgControlStatusGroup.ctorParameters = () => [
    { type: ControlContainer, decorators: [{ type: Optional }, { type: Self }] }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgControlStatusGroup, [{
        type: Directive,
        args: [{
                selector: '[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]',
                host: ngGroupStatusHost
            }]
    }], function () { return [{ type: ɵngcc2.ControlContainer, decorators: [{
                type: Optional
            }, {
                type: Self
            }] }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmdfY29udHJvbF9zdGF0dXMuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2Zvcm1zL3NyYy9kaXJlY3RpdmVzL25nX2NvbnRyb2xfc3RhdHVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7R0FNRztBQUVILE9BQU8sRUFBQyxTQUFTLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUd4RCxPQUFPLEVBQUMsZ0JBQWdCLEVBQUMsTUFBTSxxQkFBcUIsQ0FBQztBQUNyRCxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sY0FBYyxDQUFDOzs7O0FBS3ZDLE1BQU0sT0FBTyxxQkFBcUI7SUFHaEMsWUFBWSxFQUFpQztRQUMzQyxJQUFJLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQztJQUNoQixDQUFDO0lBRUQsRUFBRSxDQUFDLE1BQXdCOztRQUN6QiwyRkFBMkY7UUFDM0YsWUFBWTtRQUNaLHdFQUF3RTtRQUN4RSx1RUFBdUU7UUFDdkUsMkVBQTJFO1FBQzNFLCtDQUErQztRQUMvQyxJQUFJLE1BQU0sS0FBSyxXQUFXLEVBQUU7WUFDMUIseUZBQXlGO1lBQ3pGLHFGQUFxRjtZQUNyRixPQUFPLENBQUMsQ0FBQyxDQUFBLE1BQUMsSUFBSSxDQUFDLEdBQThDLDBDQUFFLFNBQVMsQ0FBQSxDQUFDO1NBQzFFO1FBQ0QsT0FBTyxDQUFDLENBQUMsQ0FBQSxNQUFBLE1BQUEsSUFBSSxDQUFDLEdBQUcsMENBQUUsT0FBTywwQ0FBRyxNQUFNLENBQUMsQ0FBQSxDQUFDO0lBQ3ZDLENBQUM7Q0FDRjtBQUVELE1BQU0sQ0FBQyxNQUFNLG1CQUFtQixHQUFHO0lBQ2pDLHNCQUFzQixFQUFFLGlCQUFpQjtJQUN6QyxvQkFBb0IsRUFBRSxlQUFlO0lBQ3JDLHFCQUFxQixFQUFFLGdCQUFnQjtJQUN2QyxrQkFBa0IsRUFBRSxhQUFhO0lBQ2pDLGtCQUFrQixFQUFFLGFBQWE7SUFDakMsb0JBQW9CLEVBQUUsZUFBZTtJQUNyQyxvQkFBb0IsRUFBRSxlQUFlO0NBQ3RDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxpQkFBaUIsR0FBRztJQUMvQixzQkFBc0IsRUFBRSxpQkFBaUI7SUFDekMsb0JBQW9CLEVBQUUsZUFBZTtJQUNyQyxxQkFBcUIsRUFBRSxnQkFBZ0I7SUFDdkMsa0JBQWtCLEVBQUUsYUFBYTtJQUNqQyxrQkFBa0IsRUFBRSxhQUFhO0lBQ2pDLG9CQUFvQixFQUFFLGVBQWU7SUFDckMsb0JBQW9CLEVBQUUsZUFBZTtJQUNyQyxzQkFBc0IsRUFBRSxpQkFBaUI7Q0FDMUMsQ0FBQztBQUVGOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBc0JHO0FBRUgsTUFBTSxPQUFPLGVBQWdCLFNBQVEscUJBQXFCO0lBQ3hELFlBQW9CLEVBQWE7UUFDL0IsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ1osQ0FBQzs7Ozs7Q0FDRiw0Q0FMQSxTQUFTLElBQ0w7SUFETSxFQUFDLFFBQVEsRUFBRTtrQkFBMkMsRUFBRSxJQUFJLEVBQUUsbUJBQW1CLEVBQUMsbkNBeEVyRixTQUFTLHVCQTBFRixJQUFJOzs7Ozs7O2tDQUFRO0FBSzNCOzs7Ozs7Ozs7OztHQVdHO0FBTUgsTUFBTSxPQUFPLG9CQUFxQixTQUFRLHFCQUFxQjtJQUM3RCxZQUFnQyxFQUFvQjtRQUNsRCxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDWixDQUFDOzs7OztDQUNGLGlEQVRBLFFBS0k7QUFMSyxTQUFDLGtCQUNULFFBQVEsRUFDSjtZQTlGRSxnQkFBZ0IsdUJBa0dULFFBQVEsWUFBSSxJQUFJO0FBSmlFO2VBQzlGLElBQUksRUFBRSxpQkFBaUIsY0FDeEI7Ozs7Ozs7Ozs7a0NBRXNDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBMTEMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICovXG5cbmltcG9ydCB7RGlyZWN0aXZlLCBPcHRpb25hbCwgU2VsZn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7QWJzdHJhY3RDb250cm9sRGlyZWN0aXZlfSBmcm9tICcuL2Fic3RyYWN0X2NvbnRyb2xfZGlyZWN0aXZlJztcbmltcG9ydCB7Q29udHJvbENvbnRhaW5lcn0gZnJvbSAnLi9jb250cm9sX2NvbnRhaW5lcic7XG5pbXBvcnQge05nQ29udHJvbH0gZnJvbSAnLi9uZ19jb250cm9sJztcblxudHlwZSBBbnlDb250cm9sU3RhdHVzID1cbiAgICAndW50b3VjaGVkJ3wndG91Y2hlZCd8J3ByaXN0aW5lJ3wnZGlydHknfCd2YWxpZCd8J2ludmFsaWQnfCdwZW5kaW5nJ3wnc3VibWl0dGVkJztcblxuZXhwb3J0IGNsYXNzIEFic3RyYWN0Q29udHJvbFN0YXR1cyB7XG4gIHByaXZhdGUgX2NkOiBBYnN0cmFjdENvbnRyb2xEaXJlY3RpdmV8bnVsbDtcblxuICBjb25zdHJ1Y3RvcihjZDogQWJzdHJhY3RDb250cm9sRGlyZWN0aXZlfG51bGwpIHtcbiAgICB0aGlzLl9jZCA9IGNkO1xuICB9XG5cbiAgaXMoc3RhdHVzOiBBbnlDb250cm9sU3RhdHVzKTogYm9vbGVhbiB7XG4gICAgLy8gQ3VycmVudGx5IHdpdGggVmlld0VuZ2luZSAoaW4gQU9UIG1vZGUpIGl0J3Mgbm90IHBvc3NpYmxlIHRvIHVzZSBwcml2YXRlIG1ldGhvZHMgaW4gaG9zdFxuICAgIC8vIGJpbmRpbmdzLlxuICAgIC8vIFRPRE86IG9uY2UgVmlld0VuZ2luZSBpcyByZW1vdmVkLCB0aGlzIGZ1bmN0aW9uIHNob3VsZCBiZSByZWZhY3RvcmVkOlxuICAgIC8vICAtIG1ha2UgdGhlIGBpc2AgbWV0aG9kIGBwcm90ZWN0ZWRgLCBzbyBpdCdzIG5vdCBhY2Nlc3NpYmxlIHB1YmxpY2x5XG4gICAgLy8gIC0gbW92ZSB0aGUgYHN1Ym1pdHRlZGAgc3RhdHVzIGxvZ2ljIHRvIHRoZSBgTmdDb250cm9sU3RhdHVzR3JvdXBgIGNsYXNzXG4gICAgLy8gICAgYW5kIG1ha2UgaXQgYHByaXZhdGVgIG9yIGBwcm90ZWN0ZWRgIHRvby5cbiAgICBpZiAoc3RhdHVzID09PSAnc3VibWl0dGVkJykge1xuICAgICAgLy8gV2UgY2hlY2sgZm9yIHRoZSBgc3VibWl0dGVkYCBmaWVsZCBmcm9tIGBOZ0Zvcm1gIGFuZCBgRm9ybUdyb3VwRGlyZWN0aXZlYCBjbGFzc2VzLCBidXRcbiAgICAgIC8vIHdlIGF2b2lkIGluc3RhbmNlb2YgY2hlY2tzIHRvIHByZXZlbnQgbm9uLXRyZWUtc2hha2FibGUgcmVmZXJlbmNlcyB0byB0aG9zZSB0eXBlcy5cbiAgICAgIHJldHVybiAhISh0aGlzLl9jZCBhcyB1bmtub3duIGFzIHtzdWJtaXR0ZWQ6IGJvb2xlYW59IHwgbnVsbCk/LnN1Ym1pdHRlZDtcbiAgICB9XG4gICAgcmV0dXJuICEhdGhpcy5fY2Q/LmNvbnRyb2w/LltzdGF0dXNdO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBuZ0NvbnRyb2xTdGF0dXNIb3N0ID0ge1xuICAnW2NsYXNzLm5nLXVudG91Y2hlZF0nOiAnaXMoXCJ1bnRvdWNoZWRcIiknLFxuICAnW2NsYXNzLm5nLXRvdWNoZWRdJzogJ2lzKFwidG91Y2hlZFwiKScsXG4gICdbY2xhc3MubmctcHJpc3RpbmVdJzogJ2lzKFwicHJpc3RpbmVcIiknLFxuICAnW2NsYXNzLm5nLWRpcnR5XSc6ICdpcyhcImRpcnR5XCIpJyxcbiAgJ1tjbGFzcy5uZy12YWxpZF0nOiAnaXMoXCJ2YWxpZFwiKScsXG4gICdbY2xhc3MubmctaW52YWxpZF0nOiAnaXMoXCJpbnZhbGlkXCIpJyxcbiAgJ1tjbGFzcy5uZy1wZW5kaW5nXSc6ICdpcyhcInBlbmRpbmdcIiknLFxufTtcblxuZXhwb3J0IGNvbnN0IG5nR3JvdXBTdGF0dXNIb3N0ID0ge1xuICAnW2NsYXNzLm5nLXVudG91Y2hlZF0nOiAnaXMoXCJ1bnRvdWNoZWRcIiknLFxuICAnW2NsYXNzLm5nLXRvdWNoZWRdJzogJ2lzKFwidG91Y2hlZFwiKScsXG4gICdbY2xhc3MubmctcHJpc3RpbmVdJzogJ2lzKFwicHJpc3RpbmVcIiknLFxuICAnW2NsYXNzLm5nLWRpcnR5XSc6ICdpcyhcImRpcnR5XCIpJyxcbiAgJ1tjbGFzcy5uZy12YWxpZF0nOiAnaXMoXCJ2YWxpZFwiKScsXG4gICdbY2xhc3MubmctaW52YWxpZF0nOiAnaXMoXCJpbnZhbGlkXCIpJyxcbiAgJ1tjbGFzcy5uZy1wZW5kaW5nXSc6ICdpcyhcInBlbmRpbmdcIiknLFxuICAnW2NsYXNzLm5nLXN1Ym1pdHRlZF0nOiAnaXMoXCJzdWJtaXR0ZWRcIiknLFxufTtcblxuLyoqXG4gKiBAZGVzY3JpcHRpb25cbiAqIERpcmVjdGl2ZSBhdXRvbWF0aWNhbGx5IGFwcGxpZWQgdG8gQW5ndWxhciBmb3JtIGNvbnRyb2xzIHRoYXQgc2V0cyBDU1MgY2xhc3Nlc1xuICogYmFzZWQgb24gY29udHJvbCBzdGF0dXMuXG4gKlxuICogQHVzYWdlTm90ZXNcbiAqXG4gKiAjIyMgQ1NTIGNsYXNzZXMgYXBwbGllZFxuICpcbiAqIFRoZSBmb2xsb3dpbmcgY2xhc3NlcyBhcmUgYXBwbGllZCBhcyB0aGUgcHJvcGVydGllcyBiZWNvbWUgdHJ1ZTpcbiAqXG4gKiAqIG5nLXZhbGlkXG4gKiAqIG5nLWludmFsaWRcbiAqICogbmctcGVuZGluZ1xuICogKiBuZy1wcmlzdGluZVxuICogKiBuZy1kaXJ0eVxuICogKiBuZy11bnRvdWNoZWRcbiAqICogbmctdG91Y2hlZFxuICpcbiAqIEBuZ01vZHVsZSBSZWFjdGl2ZUZvcm1zTW9kdWxlXG4gKiBAbmdNb2R1bGUgRm9ybXNNb2R1bGVcbiAqIEBwdWJsaWNBcGlcbiAqL1xuQERpcmVjdGl2ZSh7c2VsZWN0b3I6ICdbZm9ybUNvbnRyb2xOYW1lXSxbbmdNb2RlbF0sW2Zvcm1Db250cm9sXScsIGhvc3Q6IG5nQ29udHJvbFN0YXR1c0hvc3R9KVxuZXhwb3J0IGNsYXNzIE5nQ29udHJvbFN0YXR1cyBleHRlbmRzIEFic3RyYWN0Q29udHJvbFN0YXR1cyB7XG4gIGNvbnN0cnVjdG9yKEBTZWxmKCkgY2Q6IE5nQ29udHJvbCkge1xuICAgIHN1cGVyKGNkKTtcbiAgfVxufVxuXG4vKipcbiAqIEBkZXNjcmlwdGlvblxuICogRGlyZWN0aXZlIGF1dG9tYXRpY2FsbHkgYXBwbGllZCB0byBBbmd1bGFyIGZvcm0gZ3JvdXBzIHRoYXQgc2V0cyBDU1MgY2xhc3Nlc1xuICogYmFzZWQgb24gY29udHJvbCBzdGF0dXMgKHZhbGlkL2ludmFsaWQvZGlydHkvZXRjKS4gT24gZ3JvdXBzLCB0aGlzIGluY2x1ZGVzIHRoZSBhZGRpdGlvbmFsXG4gKiBjbGFzcyBuZy1zdWJtaXR0ZWQuXG4gKlxuICogQHNlZSBgTmdDb250cm9sU3RhdHVzYFxuICpcbiAqIEBuZ01vZHVsZSBSZWFjdGl2ZUZvcm1zTW9kdWxlXG4gKiBAbmdNb2R1bGUgRm9ybXNNb2R1bGVcbiAqIEBwdWJsaWNBcGlcbiAqL1xuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOlxuICAgICAgJ1tmb3JtR3JvdXBOYW1lXSxbZm9ybUFycmF5TmFtZV0sW25nTW9kZWxHcm91cF0sW2Zvcm1Hcm91cF0sZm9ybTpub3QoW25nTm9Gb3JtXSksW25nRm9ybV0nLFxuICBob3N0OiBuZ0dyb3VwU3RhdHVzSG9zdFxufSlcbmV4cG9ydCBjbGFzcyBOZ0NvbnRyb2xTdGF0dXNHcm91cCBleHRlbmRzIEFic3RyYWN0Q29udHJvbFN0YXR1cyB7XG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIEBTZWxmKCkgY2Q6IENvbnRyb2xDb250YWluZXIpIHtcbiAgICBzdXBlcihjZCk7XG4gIH1cbn1cbiJdfQ==